var search_data = {"index":{"searchIndex":["adminnotification","adminnotificationscontroller","adminnotificationshelper","applicationcontroller","applicationhelper","applicationjob","applicationmailer","applicationrecord","applicationscontroller","applicationshelper","band","bandevent","bandeventscontroller","bandscontroller","event","eventscontroller","homecontroller","notificationmailer","pagescontroller","serviceworkercontroller","sessionscontroller","sessionshelper","spotifycontroller","spotifyservice","user","venue","venuescontroller","admin?()","approve()","authorize_admin!()","create()","create()","create()","create()","create()","create()","current_user_admin?()","destroy()","destroy()","destroy()","destroy()","destroy()","disapprove()","display_name()","edit()","edit()","edit()","event_count()","events()","full_address()","get_artist_info()","get_artist_info()","home()","index()","index()","index()","index()","index()","index()","index()","near_location()","new()","new()","new()","new()","new()","pending?()","recipient_count()","search_artists()","search_artists()","sent?()","show()","show()","show()","show()","update()","update()","update()","update()","user_notification()","users()","application.css","band_selection.css","band_selection.scss","custom.css","application.js","application.js","band_selection_controller.js","band_times_controller.js","calendar_controller.js","form_validation_controller.js","hello_controller.js","index.js","service_worker.js","service-worker.js"],"longSearchIndex":["adminnotification","adminnotificationscontroller","adminnotificationshelper","applicationcontroller","applicationhelper","applicationjob","applicationmailer","applicationrecord","applicationscontroller","applicationshelper","band","bandevent","bandeventscontroller","bandscontroller","event","eventscontroller","homecontroller","notificationmailer","pagescontroller","serviceworkercontroller","sessionscontroller","sessionshelper","spotifycontroller","spotifyservice","user","venue","venuescontroller","user#admin?()","eventscontroller#approve()","applicationcontroller#authorize_admin!()","adminnotificationscontroller#create()","bandeventscontroller#create()","bandscontroller#create()","eventscontroller#create()","sessionscontroller#create()","venuescontroller#create()","applicationcontroller#current_user_admin?()","adminnotificationscontroller#destroy()","bandeventscontroller#destroy()","bandscontroller#destroy()","eventscontroller#destroy()","venuescontroller#destroy()","eventscontroller#disapprove()","venue#display_name()","bandscontroller#edit()","eventscontroller#edit()","venuescontroller#edit()","adminnotification#event_count()","adminnotification#events()","venue#full_address()","spotifycontroller#get_artist_info()","spotifyservice#get_artist_info()","pagescontroller#home()","adminnotificationscontroller#index()","applicationscontroller#index()","bandscontroller#index()","eventscontroller#index()","homecontroller#index()","serviceworkercontroller#index()","venuescontroller#index()","event::near_location()","adminnotificationscontroller#new()","bandscontroller#new()","eventscontroller#new()","spotifyservice::new()","venuescontroller#new()","event#pending?()","adminnotification#recipient_count()","spotifycontroller#search_artists()","spotifyservice#search_artists()","adminnotification#sent?()","adminnotificationscontroller#show()","bandscontroller#show()","eventscontroller#show()","venuescontroller#show()","bandeventscontroller#update()","bandscontroller#update()","eventscontroller#update()","venuescontroller#update()","notificationmailer#user_notification()","adminnotification#users()","","","","","","","","","","","","","",""],"info":[["AdminNotification","","AdminNotification.html","",""],["AdminNotificationsController","","AdminNotificationsController.html","",""],["AdminNotificationsHelper","","AdminNotificationsHelper.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["ApplicationJob","","ApplicationJob.html","",""],["ApplicationMailer","","ApplicationMailer.html","",""],["ApplicationRecord","","ApplicationRecord.html","",""],["ApplicationsController","","ApplicationsController.html","",""],["ApplicationsHelper","","ApplicationsHelper.html","",""],["Band","","Band.html","","<p>Represents a musical band that can perform at multiple events.\n<p>A band may have many scheduled performances …\n"],["BandEvent","","BandEvent.html","","<p>Join model representing a band’s scheduled performance at an event.\n<p>Each BandEvent links a Band to …\n"],["BandEventsController","","BandEventsController.html","","<p>BandEventsController manages the relationship between bands and events. It allows adding, updating, and …\n"],["BandsController","","BandsController.html","","<p>BandsController manages CRUD operations for bands. It allows users to view, create, edit, and delete …\n"],["Event","","Event.html","","<p>Represents a music event at a given venue.\n<p>Events can include many bands and are submitted by users (optionally). …\n"],["EventsController","","EventsController.html","","<p>EventsController handles the creation, display, approval, editing, and deletion of events. It supports …\n"],["HomeController","","HomeController.html","",""],["NotificationMailer","","NotificationMailer.html","",""],["PagesController","","PagesController.html","",""],["ServiceWorkerController","","ServiceWorkerController.html","",""],["SessionsController","","SessionsController.html","",""],["SessionsHelper","","SessionsHelper.html","",""],["SpotifyController","","SpotifyController.html","","<p>SpotifyController handles interaction with the Spotify API for searching artists and retrieving detailed …\n"],["SpotifyService","","SpotifyService.html","",""],["User","","User.html","","<p>Represents an application user with authentication and authorization features.\n<p>Uses Devise for authentication. …\n"],["Venue","","Venue.html","",""],["VenuesController","","VenuesController.html","","<p>VenuesController manages the creation, viewing, editing, and deletion of venues.\n<p>Actions\n<p>index - Lists …\n"],["admin?","User","User.html#method-i-admin-3F","()","<p>Checks if the user has admin privileges.\n<p>@return [Boolean] true if the user is an admin, false otherwise …\n"],["approve","EventsController","EventsController.html#method-i-approve","()","<p>PATCH /events/:id/approve Admin-only action to approve an event.\n"],["authorize_admin!","ApplicationController","ApplicationController.html#method-i-authorize_admin-21","()",""],["create","AdminNotificationsController","AdminNotificationsController.html#method-i-create","()",""],["create","BandEventsController","BandEventsController.html#method-i-create","()","<p>POST /band_events Creates a new band-event association with optional set details.\n<p>Redirects:\n<p>On success: …\n"],["create","BandsController","BandsController.html#method-i-create","()","<p>POST /bands Creates a new band. Shows error if band name is taken.\n"],["create","EventsController","EventsController.html#method-i-create","()","<p>POST /events Creates a new event, associates bands, and optionally auto-approves it.\n"],["create","SessionsController","SessionsController.html#method-i-create","()",""],["create","VenuesController","VenuesController.html#method-i-create","()","<p>POST /venues Creates a new venue if valid.\n"],["current_user_admin?","ApplicationController","ApplicationController.html#method-i-current_user_admin-3F","()",""],["destroy","AdminNotificationsController","AdminNotificationsController.html#method-i-destroy","()",""],["destroy","BandEventsController","BandEventsController.html#method-i-destroy","()","<p>DELETE /band_events/:id Removes a band from the associated event.\n<p>Redirects:\n<p>Always redirects to the event …\n"],["destroy","BandsController","BandsController.html#method-i-destroy","()","<p>DELETE /bands/:id Deletes a band.\n"],["destroy","EventsController","EventsController.html#method-i-destroy","()","<p>DELETE /events/:id Deletes an event.\n"],["destroy","VenuesController","VenuesController.html#method-i-destroy","()","<p>DELETE /venues/:id Deletes a venue unless it has associated events.\n"],["disapprove","EventsController","EventsController.html#method-i-disapprove","()","<p>PATCH /events/:id/disapprove Admin-only action to unapprove an event.\n"],["display_name","Venue","Venue.html#method-i-display_name","()",""],["edit","BandsController","BandsController.html#method-i-edit","()","<p>GET /bands/:id/edit Renders form to edit an existing band.\n"],["edit","EventsController","EventsController.html#method-i-edit","()","<p>GET /events/:id/edit Renders the form to edit an event.\n"],["edit","VenuesController","VenuesController.html#method-i-edit","()","<p>GET /venues/:id/edit Renders form to edit an existing venue.\n"],["event_count","AdminNotification","AdminNotification.html#method-i-event_count","()",""],["events","AdminNotification","AdminNotification.html#method-i-events","()",""],["full_address","Venue","Venue.html#method-i-full_address","()",""],["get_artist_info","SpotifyController","SpotifyController.html#method-i-get_artist_info","()","<p>GET /spotify/get_artist_info Retrieves detailed artist information from Spotify by Spotify ID.\n<p>Params: …\n"],["get_artist_info","SpotifyService","SpotifyService.html#method-i-get_artist_info","(spotify_id)",""],["home","PagesController","PagesController.html#method-i-home","()",""],["index","AdminNotificationsController","AdminNotificationsController.html#method-i-index","()",""],["index","ApplicationsController","ApplicationsController.html#method-i-index","()",""],["index","BandsController","BandsController.html#method-i-index","()","<p>GET /bands Lists all bands with pagination.\n"],["index","EventsController","EventsController.html#method-i-index","()","<p>GET /events Displays approved or pending events, optionally filtered by month or location. Renders HTML …\n"],["index","HomeController","HomeController.html#method-i-index","()",""],["index","ServiceWorkerController","ServiceWorkerController.html#method-i-index","()",""],["index","VenuesController","VenuesController.html#method-i-index","()","<p>GET /venues Lists venues with pagination.\n"],["near_location","Event","Event.html#method-c-near_location","(lat, lon, radius_in_miles = 10)","<p>Finds events near a specific latitude and longitude.\n<p>@param lat [Float] latitude @param lon [Float] longitude …\n"],["new","AdminNotificationsController","AdminNotificationsController.html#method-i-new","()",""],["new","BandsController","BandsController.html#method-i-new","()","<p>GET /bands/new Renders form to create a new band.\n"],["new","EventsController","EventsController.html#method-i-new","()","<p>GET /events/new Renders the form to create a new event.\n"],["new","SpotifyService","SpotifyService.html#method-c-new","()",""],["new","VenuesController","VenuesController.html#method-i-new","()","<p>GET /venues/new Renders form for a new venue.\n"],["pending?","Event","Event.html#method-i-pending-3F","()","<p>Checks if the event is pending approval.\n<p>@return [Boolean] true if not approved, false otherwise\n"],["recipient_count","AdminNotification","AdminNotification.html#method-i-recipient_count","()",""],["search_artists","SpotifyController","SpotifyController.html#method-i-search_artists","()","<p>GET /spotify/search_artists Searches for artists on Spotify based on a query string.\n<p>Params:\n<p>query: The …\n"],["search_artists","SpotifyService","SpotifyService.html#method-i-search_artists","(name, limit = 10)",""],["sent?","AdminNotification","AdminNotification.html#method-i-sent-3F","()",""],["show","AdminNotificationsController","AdminNotificationsController.html#method-i-show","()",""],["show","BandsController","BandsController.html#method-i-show","()","<p>GET /bands/:id Displays a single band and its upcoming events with venue info.\n"],["show","EventsController","EventsController.html#method-i-show","()","<p>GET /events/:id Shows a single event, its bands, and band event times.\n"],["show","VenuesController","VenuesController.html#method-i-show","()","<p>GET /venues/:id Displays a single venue along with its upcoming and past events.\n"],["update","BandEventsController","BandEventsController.html#method-i-update","()","<p>PATCH/PUT /band_events/:id Updates the set time, order, or notes for a band in an event.\n<p>Redirects:\n<p>On …\n"],["update","BandsController","BandsController.html#method-i-update","()","<p>PATCH/PUT /bands/:id Updates an existing band. Shows alert if name is taken.\n"],["update","EventsController","EventsController.html#method-i-update","()","<p>PATCH/PUT /events/:id Updates an event and its associated bands.\n"],["update","VenuesController","VenuesController.html#method-i-update","()","<p>PATCH/PUT /venues/:id Updates an existing venue if valid.\n"],["user_notification","NotificationMailer","NotificationMailer.html#method-i-user_notification","(user, admin_notification)","<p>Subject can be set in your I18n file at config/locales/en.yml with the following lookup:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">en</span>.<span class=\"ruby-identifier\">notification_mailer</span>.<span class=\"ruby-identifier\">user_notification</span>.<span class=\"ruby-identifier\">subject</span>\n</pre>\n"],["users","AdminNotification","AdminNotification.html#method-i-users","()",""],["application.css","","app/assets/stylesheets/application_css.html","","<p>/*\n\n<pre>* This is a manifest file that&#39;ll be compiled into application.css.\n*\n* With Propshaft, assets are ...</pre>\n"],["band_selection.css","","app/assets/stylesheets/band_selection_css.html","","<p>.band-search-container {\n\n<pre>border-bottom: 1px solid #dee2e6;\npadding-bottom: 1rem;</pre>\n<p>}\n"],["band_selection.scss","","app/assets/stylesheets/band_selection_scss.html","","<p>.band-search-container {\n\n<pre>border-bottom: 1px solid #dee2e6;\npadding-bottom: 1rem;</pre>\n<p>}\n"],["custom.css","","app/assets/stylesheets/custom_css.html","","<p>/*body {\n\n<pre>  background: url(&#39;magicpattern-65O4Dw6-xLg-unsplash.jpg&#39;);\n  font-family: &#39;Questrial&#39;, &#39;Helvetica ...</pre>\n"],["application.js","","app/javascript/application_js.html","","<p>// Configure your import map in config/importmap.rb. Read more: github.com/rails/importmap-rails import …\n"],["application.js","","app/javascript/controllers/application_js.html","","<p>import { Application } from “@hotwired/stimulus”\n<p>const application = Application.start()\n<p>//  …\n"],["band_selection_controller.js","","app/javascript/controllers/band_selection_controller_js.html","","<p>import { Controller } from “@hotwired/stimulus”;\n<p>export default class extends Controller {\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">static</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["band_times_controller.js","","app/javascript/controllers/band_times_controller_js.html","","<p>import { Controller } from “@hotwired/stimulus”;\n<p>export default class extends Controller {\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">static</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["calendar_controller.js","","app/javascript/controllers/calendar_controller_js.html","","<p>import { Controller } from “@hotwired/stimulus” import { Calendar } from ‘@fullcalendar/core’ …\n"],["form_validation_controller.js","","app/javascript/controllers/form_validation_controller_js.html","","<p>import { Controller } from “@hotwired/stimulus”;\n<p>export default class extends Controller {\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">static</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["hello_controller.js","","app/javascript/controllers/hello_controller_js.html","","<p>import { Controller } from “@hotwired/stimulus”\n<p>export default class extends Controller {\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">connect</span>() <span class=\"ruby-operator\">...</span>\n</pre>\n"],["index.js","","app/javascript/controllers/index_js.html","","<p>// Import and register all your controllers from the importmap via controllers/<strong>*/</strong>_controller import { …\n"],["service_worker.js","","app/javascript/controllers/service_worker_js.html","","<p>self.addEventListener(“install”, function(event) {\n\n<pre>console.log(&quot;Service Worker installing...&quot;); ...</pre>\n"],["service-worker.js","","app/views/pwa/service-worker_js.html","","<p>// Add a service worker for processing Web Push notifications: // // self.addEventListener(“push”, …\n"]]}}